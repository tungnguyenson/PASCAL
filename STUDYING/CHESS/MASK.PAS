Uses CRT, Graph, spGraph;

Const
  H = 38;
  V = 38;

  King : Array[0..37, 0..37] Of Byte = (
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,12,12,12,12,12,12,12,12,12,12,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0,15,15,15,15,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,15,15,15, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0,15,15,15,12,12,12,12,12,15,15,15,15,15,15,15,15,15,15,12,12,12,12,12,15,15,15, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0,15,15,15,12,12,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,12,12,12,15,15,15, 0, 0, 0, 0, 0),
( 0, 0, 0, 0,15,15,12,12,12,15,15,15,15,15,15,15,12,15,15,15,15,15,15,15,15,15,15,15,15,12,12,12,15,15, 0, 0, 0, 0),
( 0, 0, 0,15,15,12,12,12,15,15,15,15,15,15,15,15,12,12,15,15,15,15,15,12,12,15,15,15,15,15,12,12,12,15,15, 0, 0, 0),
( 0, 0,15,15,15,12,12,15,15,15,15,15,12,15,15,15,12,12,15,15,15,15,12,12,12,15,15,15,15,15,15,12,12,15,15,15, 0, 0),
( 0, 0,15,15,12,12,15,15,15,15,15,15,12,12,15,15,12,12,15,15,15,12,12,15,15,12,15,15,15,15,15,15,12,12,15,15, 0, 0),
( 0,15,15,12,12,15,15,15,15,15,15,15,12,12,15,15,12,12,15,15,12,12,12,12,15,15,12,12,15,15,15,15,15,12,12,15,15, 0),
( 0,15,15,12,12,15,15,15,15,15,15,15,12,12,15,15,12,12,15,12,12,15,15,12,12,12,12,15,15,15,15,15,15,12,12,15,15, 0),
(15,15,12,12,15,15,15,15,15,15,15,15,12,12,15,15,12,12,12,12,12,15,12,12,12,15,15,15,15,15,15,15,15,15,12,12,15,15),
(15,15,12,12,15,15,15,15,15,15,15,15,12,12,12,12,12,12,15,15,12,12,12,15,15,15,15,15,15,15,15,15,15,15,12,12,15,15),
(15,15,12,12,15,15,15,15,15,15,15,15,15,12,12,12,12,12,15,15,12,12,15,12,12,15,15,15,15,15,15,15,15,15,12,12,15,15),
(15,15,12,12,15,15,15,15,15,15,15,15,15,15,15,15,12,12,15,15,15,15,15,12,12,15,15,15,15,15,15,15,15,15,12,12,15,15),
(15,15,12,12,15,15,15,15,15,15,15,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,15,15,15,15,15,15,12,12,15,15),
(15,15,12,12,15,15,15,15,15,15,12,12,12,12,12,12,12,12,15,12,12,12,12,12,12,12,12,12,15,15,15,15,15,15,12,12,15,15),
(15,15,12,12,15,15,15,15,15,15,15,15,15,12,12,15,12,12,15,15,15,15,15,12,12,15,15,15,15,15,15,15,15,15,12,12,15,15),
( 8,15,15,12,12,15,15,15,15,15,15,15,12,12,15,15,12,12,15,12,12,15,15,12,12,15,15,15,15,15,15,15,15,12,12,15,15, 7),
( 8,15,15,12,12,15,15,15,15,15,15,12,12,15,15,15,12,12,15,12,12,12,15,12,12,15,15,15,15,15,15,15,15,12,12,15,15, 7),
( 8, 8,15,15,12,12,15,15,15,15,12,12,15,15,15,15,12,12,15,15,12,12,15,12,12,15,15,15,15,15,15,15,12,12,15,15, 7, 7),
( 8, 8,15,15,15,12,12,15,15,15,15,15,15,15,15,15,12,12,15,15,15,15,15,12,12,15,15,15,15,15,15,12,12,15,15,15, 7, 7),
( 8, 8, 8,15,15,12,12,12,15,15,15,15,15,15,15,15,12,12,15,15,15,12,12,12,12,15,15,15,15,15,12,12,12,15,15, 7, 7, 7),
( 8, 8, 8, 8,15,15,12,12,12,15,15,15,15,15,15,15,15,12,15,15,15,15,12,12,15,15,15,15,15,12,12,12,15,15, 7, 7, 7, 7),
( 8, 8, 8, 8, 8,15,15,15,12,12,12,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,12,12,12,15,15,15, 7, 7, 7, 7, 7),
( 8, 8, 8, 8, 8, 8,15,15,15,12,12,12,12,12,15,15,15,15,15,15,15,15,15,15,12,12,12,12,12,15,15,15, 7, 7, 7, 7, 7, 7),
( 8, 8, 8, 8, 8, 8, 8,15,15,15,15,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,15,15,15, 7, 7, 7, 7, 7, 7, 7, 7),
( 8, 8, 8, 8, 8, 8, 8, 8, 8,15,15,15,15,15,12,12,12,12,12,12,12,12,12,12,15,15,15,15,15, 7, 8, 7, 7, 7, 7, 7, 7, 7),
( 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 0),
( 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 0, 0),
( 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 0, 0),
( 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 7, 7, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));

  Mask : Array[0..37, 0..37] Of Byte = (
(15,15,15,15,15,15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15,15,15,15,15,15),
(15,15,15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15,15,15),
(15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15),
(15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15),
(15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15),
(15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15),
(15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15),
(15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15),
(15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15),
(15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15),
(15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15),
(15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
(15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15),
(15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15),
(15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15),
(15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15),
(15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15),
(15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15),
(15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15),
(15,15,15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15,15,15),
(15,15,15,15,15,15,15,15,15,15,15,15,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,15,15,15,15,15,15,15,15,15,15,15,15,15));

Procedure Delay(T : Word);
  Var
    i, j : Word;
  Begin
    For i := 0 To T Do
      For j := 0 To 65535 Do
        ;
  End;

Procedure ShowPic;
  Var
    i, j : Integer;
  Begin
    Randomize;
    For i := 0 To GetMaxY Do
      For j := 0 To GetMaxX Do
        PutPixel(j, i, Random(16));
    For i := 0 To V-1 Do
      For j := 0 To H-1 Do
        PutPixel(j, i, King[i, j]);
    For i := 0 To V-1 Do
      For j := 0 To H-1 Do
        PutPixel(j+H, i, Mask[i, j]);
  End;

Procedure Test;
  Var
    P, P0, PMask : Pointer;
    i, j, k, l : Integer;
  Begin
    i := ImageSize(0, 0, 37, 37);
    GetMem(P, i);
    GetMem(P0, i);
    GetMem(PMask, i);
    GetImage(0, 0, 37, 37, P^);
    GetImage(38, 0, 38+37, 37, PMask^);
    PutImage(100, 100, P^, XORPut);
{    SetFillStyle(5, 8);
    Bar(0, 0, GetMaxX, GetMaxY);{}
    i := 0;
    Repeat
      GetImage(i, 50, i+37, 87, P0^);
      For k := 0 To V-1 Do
        For j := 0 To H-1 Do
          Begin
            l := GetPixel(i+j, k+50)Or King[k, j];
            PutPixel(i+j, k+50, l);
          End;{}
      For k := 0 To V-1 Do
        For j := 0 To H-1 Do
          Begin
            l := GetPixel(i+j, k+50);
            PutPixel(i+j, k+50, King[k, j] Or l);
          End;{}
{      PutImage(i, 50, PMask^, AndPut);
      PutImage(i, 50, P^, XOrPut);{}
      Delay(10);{}
      PutImage(i, 50, P0^, NormalPut);
      Inc(i, 5);
      If i > 600 Then Begin i := 0; End;
    Until {False;{}Keypressed;{}
    FreeMem(P, i);
    FreeMem(P0, i);
    FreeMem(PMask, i);
  End;

Begin
  InitGraphMode('SVGA256', 2);
  ShowPic;{}
  Test;{}
  ReadLn;
  CloseGraph;
End.