; TESTInt0.ASM
; Program for testing Int0. 
; Writing by Nguyen Quoc Anh. 1995

Display_ MACRO MMM
MOV DX,OFFSET MMM
MOV AH,9
INT 21H
ENDM

CODE SEGMENT
ASSUME CS:CODE
IP1 DW ?
CS1 DW ?
TBO DB  10,13, 'CHUONG TRINH TEST  Int0. HAY AN MOT  PHIM DE BAT DAU'
DB 10,13,36
TB1 DB 10,13, 'DA RA KHOI NGAT Int0 AN TOAN'
DB 10,13, 'AN PHIM BAT KY DE VE DOS'
Delta_ DB 0
Err_ DB 'PHEP CHIA BI TRAN!'
UNK DB 10,13, 'MA LENH KHONG XAC DINH'
;
Int0: PUSH BP
MOV BP,SP
PUSH AX
PUSH DS
PUSH SI
PUSH ES
PUSH BX
PUSH CX
PUSH DI
PUSH DX
PUSH CS
POP DS
MOV DX,OFFSET CS:Err_
MOV CX,18
MOV AH,40H
MOV BX,2
INT 21H ; WRITE "STANDARD ERROR FILE"
MOV AX, [BP+4] ; GET CODE SEGMENT
MOV ES,AX
MOV SI,[BP+2] ; GET INSTRUCTION PONTER
MOV Delta_, 0
MOV AL,ES:[SI] ; GET OPCODE
AND AL,0FEH
CMP AL,0F6H ; IS THIS OPCODE "DIV" OR "IDIV"?
JZ G1
MOV Delta_,1 ; MAYBE SEGMENT OVERRRIDE OPCODE
INC SI
MOV AL,ES:[SI]
AND AL,0FEH
CMP AL,0F6H
JZ G1
JMP Unknown_
G1: INC SI
MOV AL,ES:[SI]
MOV AH, AL
AND AH,30H
CMP AH,30H
JZ G2 ; OPCODE VALID
JMP Unknown_
G2: PUSH CS
POP ES
MOV AH,AL
AND AH,0C0H
CMP AH,0C0H
JNZ G3
ADD Delta_,2 ; "2 BYTES" INSTRUCTION
JMP SHORT GX
G3: CMP AH,80H
JNZ G4
ADD Delta_,4 ; "4 BYTES" INSTRUCTION
JMP SHORT GX
G4: CMP AH,40H
JNZ G5
ADD Delta_,3 ; "3 BYTES" INSTRUCTION
JMP SHORT GX
G5: CMP AL,36H
JNZ G6
G5A: ADD Delta_,4 ; "4 BYTES" INSTRUCTION
JMP GX
G6: CMP AL,3EH
JZ G5A
ADD Delta_,2 ; "2 BYTES" INSTRUCTION
GX: MOV SI,[BP+2]
MOV AL,Delta_
XOR AH,AH
ADD AX,SI
MOV [BP+2], AX ; CHANGE RETURN ADDRESS
JMP EXIT
Unknown_: MOV DX,OFFSET CS:UNK ; UNKNOWN OPCODE
MOV CX,28
MOV AH,40H
MOV BX,2
INT 21H ; WRITE "STANDARD ERROR FILE"
MOV AH,4CH
INT 21H ; RETURN BECAUSE OF UNKNOWN OPCODE
EXIT: POP DX
POP DI
POP CX
POP BX
POP ES
POP SI
POP DS
POP AX
POP BP
IRET ; EXIT Int0 TO NEXT INSTRUCTION
START1: PUSH CS
POP DS
PUSH CS
POP ES
MOV AH,35H
MOV AL,0
INT 21H ; GET INTERRUPT VECTOR 0
MOV CS: IP1,BX
MOV CS: CS1,ES
MOV DX,OFFSET CS:Int0
CLI
MOV AX,0
MOV ES,AX
MOV SI,0
MOV ES:[SI],DX
MOV AX,CS
ADD SI,2
MOV ES:[SI],AX ; SET INTERRUPT VECTOR 0
STI
Display_ TBO
MOV AX,200H
MOV BL,1
DIV BL ; THIS INSTRUCTION CAUSES Int0
Display_ TB1
MOV AH,0
INT 16H
MOV DS,AX ; RESTORE ORIGINAL Int0
Display_ TB1
MOV AH,0
INT 16H
MOV DS,AX ; RESTORE ORGINAL Int0
MOV SI,AX
MOV AX,CS:IP1
MOV [SI], AX
MOV AX,CS:CS1
MOV [SI+2],AX
MOV AH,4CH ; RETURN TO DOS
INT 21H
CODE ENDS
END START1
